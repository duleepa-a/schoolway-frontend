generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id                  String                @id @default(cuid())
  email               String                @unique
  firstname           String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  lastname            String?
  role                UserRole?
  password            String
  activeStatus        Boolean               @default(true)
  address             String?
  birthDate           DateTime?
  mobile              String?
  nic                 String?
  nic_pic             String?
  district            String?
  dp                  String?               @default("/Images/male_pro_pic_placeholder.png")
  driverProfile       DriverProfile?
  driverJobRequests   DriverVanJobRequest[] @relation("DriverJobRequests")
  vanOwnerJobRequests DriverVanJobRequest[] @relation("VanOwnerJobRequests")
  vans                Van[]
  vanService          VanService?
}

model VanService {
  id               String      @id @default(cuid())
  serviceName      String
  contactNo        String
  serviceRegNumber String
  businessDocument String?
  userId           String      @unique
  user             UserProfile @relation(fields: [userId], references: [id])
}

model DriverProfile {
  id             String      @id @default(cuid())
  licenseId      String
  licenseExpiry  DateTime
  licenseFront   String?
  licenseBack    String?
  policeReport   String?
  userId         String      @unique
  rating         Float       @default(0)
  ratingCount    Int         @default(0)
  startedDriving DateTime?   @default(now())
  status         Int         @default(2)
  bio            String?
  languages      String[]
  licenseType    String[]
  medicalReport  String?
  relocate       Boolean     @default(false)
  user           UserProfile @relation(fields: [userId], references: [id])
}

model Van {
  id                      Int                   @id @default(autoincrement())
  registrationNumber      String                @unique
  licensePlateNumber      String
  makeAndModel            String
  seatingCapacity         Int
  acCondition             Boolean
  routeStart              String?
  routeEnd                String?
  rBookUrl                String
  revenueLicenseUrl       String
  fitnessCertificateUrl   String
  insuranceCertificateUrl String
  photoUrl                String
  createdAt               DateTime              @default(now())
  ownerId                 String
  hasDriver               Boolean               @default(false)
  isApproved              Boolean               @default(false)
  assignedDriverId        String?
  salaryPercentage        Float?                @default(25.0)
  shiftDetails            String?
  endTime                 String?
  privateRating           Float                 @default(0)
  startTime               String?
  studentRating           Float                 @default(0)
  jobRequests             DriverVanJobRequest[]
  user                    UserProfile           @relation(fields: [ownerId], references: [id])
}

model ContactUs {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  userType  String
  status    String   @default("Pending")
  createdAt DateTime @default(now())
}

model DriverVanJobRequest {
  id              String           @id @default(cuid())
  driverId        String
  vanId           Int
  vanOwnerId      String
  status          JobRequestStatus @default(PENDING)
  message         String?
  proposedSalary  Float?
  turn            String?
  responseMessage String?
  respondedAt     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  expiresAt       DateTime?        @default(dbgenerated("(now() + '21 days'::interval)"))
  driver          UserProfile      @relation("DriverJobRequests", fields: [driverId], references: [id])
  van             Van              @relation(fields: [vanId], references: [id])
  vanOwner        UserProfile      @relation("VanOwnerJobRequests", fields: [vanOwnerId], references: [id])

  @@unique([driverId, vanOwnerId, vanId], name: "unique_driver_van_request")
}

enum UserRole {
  ADMIN
  PARENT
  SERVICE
  DRIVER
  TEACHER
}

enum JobRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  EXPIRED
}

enum JobRequestType {
  VAN_OWNER_TO_DRIVER
}
